{
  "uid" : "145a1a9bf7531247",
  "name" : "Get questions",
  "fullName" : "tests.test_futurama_questions.TestQuestions#test_get_questions",
  "historyId" : "af6ee829867beaceece74dfb0f38024c",
  "time" : {
    "start" : 1676326075384,
    "stop" : 1676326076546,
    "duration" : 1162
  },
  "status" : "broken",
  "statusMessage" : "jsonschema.exceptions.ValidationError: 12 is not of type 'string'\n\nFailed validating 'type' in schema['items']['properties']['correctAnswer']:\n    {'title': 'Correctanswer', 'type': 'string'}\n\nOn instance[6]['correctAnswer']:\n    12",
  "statusTrace" : "self = <test_futurama_questions.TestQuestions object at 0x7ff9c8d03610>\n\n    @allure.title('Get questions')\n    def test_get_questions(self):\n        response = get_questions_api()\n        json_response: list[QuestionDict] = response.json()\n    \n        assert_status_code(response.status_code, HTTPStatus.OK)\n    \n>       validate_schema(json_response, DefaultQuestionsList.schema())\n\ntests/test_futurama_questions.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/assertions/schema.py:7: in validate_schema\n    validate(instance=instance, schema=schema)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninstance = [{'correctAnswer': 'Philip', 'id': 1, 'possibleAnswers': ['Fred', 'Philip', 'Will', 'John'], 'question': \"What is Fry'...icide Booth', 'Street', 'Shop', 'Looking for jobs'], 'question': 'How did Fry meet Bender in the first episode?'}, ...]\nschema = {'definitions': {'DefaultQuestion': {'properties': {'correctAnswer': {'title': 'Correctanswer', 'type': 'string'}, 'id...ype': 'object'}}, 'items': {'$ref': '#/definitions/DefaultQuestion'}, 'title': 'DefaultQuestionsList', 'type': 'array'}\ncls = <class 'jsonschema.validators.Draft202012Validator'>, args = (), kwargs = {}\nvalidator = Draft202012Validator(schema={'definitions': {'DefaultQuestion': {'properties': {'correctAnswer': {'title': 'Correctans...ems': {'$ref': '#/definition...faultQuestion'}, 'title': 'DefaultQuestionsList', 'type': 'array'}, format_checker=None)\nerror = <ValidationError: \"12 is not of type 'string'\">\n\n    def validate(instance, schema, cls=None, *args, **kwargs):\n        \"\"\"\n        Validate an instance under the given schema.\n    \n            >>> validate([2, 3, 4], {\"maxItems\": 2})\n            Traceback (most recent call last):\n                ...\n            ValidationError: [2, 3, 4] is too long\n    \n        :func:`~jsonschema.validators.validate` will first verify that the\n        provided schema is itself valid, since not doing so can lead to less\n        obvious error messages and fail in less obvious or consistent ways.\n    \n        If you know you have a valid schema already, especially\n        if you intend to validate multiple instances with\n        the same schema, you likely would prefer using the\n        `jsonschema.protocols.Validator.validate` method directly on a\n        specific validator (e.g. ``Draft20212Validator.validate``).\n    \n    \n        Arguments:\n    \n            instance:\n    \n                The instance to validate\n    \n            schema:\n    \n                The schema to validate with\n    \n            cls (jsonschema.protocols.Validator):\n    \n                The class that will be used to validate the instance.\n    \n        If the ``cls`` argument is not provided, two things will happen\n        in accordance with the specification. First, if the schema has a\n        :kw:`$schema` keyword containing a known meta-schema [#]_ then the\n        proper validator will be used. The specification recommends that\n        all schemas contain :kw:`$schema` properties for this reason. If no\n        :kw:`$schema` property is found, the default validator class is the\n        latest released draft.\n    \n        Any other provided positional and keyword arguments will be passed\n        on when instantiating the ``cls``.\n    \n        Raises:\n    \n            `jsonschema.exceptions.ValidationError`:\n    \n                if the instance is invalid\n    \n            `jsonschema.exceptions.SchemaError`:\n    \n                if the schema itself is invalid\n    \n        .. rubric:: Footnotes\n        .. [#] known by a validator registered with\n            `jsonschema.validators.validates`\n        \"\"\"\n        if cls is None:\n            cls = validator_for(schema)\n    \n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        error = exceptions.best_match(validator.iter_errors(instance))\n        if error is not None:\n>           raise error\nE           jsonschema.exceptions.ValidationError: 12 is not of type 'string'\nE           \nE           Failed validating 'type' in schema['items']['properties']['correctAnswer']:\nE               {'title': 'Correctanswer', 'type': 'string'}\nE           \nE           On instance[6]['correctAnswer']:\nE               12\n\n.venv/lib/python3.10/site-packages/jsonschema/validators.py:1121: ValidationError",
  "flaky" : false,
  "newFailed" : false,
  "newBroken" : false,
  "newPassed" : false,
  "retriesCount" : 0,
  "retriesStatusChange" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "jsonschema.exceptions.ValidationError: 12 is not of type 'string'\n\nFailed validating 'type' in schema['items']['properties']['correctAnswer']:\n    {'title': 'Correctanswer', 'type': 'string'}\n\nOn instance[6]['correctAnswer']:\n    12",
    "statusTrace" : "self = <test_futurama_questions.TestQuestions object at 0x7ff9c8d03610>\n\n    @allure.title('Get questions')\n    def test_get_questions(self):\n        response = get_questions_api()\n        json_response: list[QuestionDict] = response.json()\n    \n        assert_status_code(response.status_code, HTTPStatus.OK)\n    \n>       validate_schema(json_response, DefaultQuestionsList.schema())\n\ntests/test_futurama_questions.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nutils/assertions/schema.py:7: in validate_schema\n    validate(instance=instance, schema=schema)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ninstance = [{'correctAnswer': 'Philip', 'id': 1, 'possibleAnswers': ['Fred', 'Philip', 'Will', 'John'], 'question': \"What is Fry'...icide Booth', 'Street', 'Shop', 'Looking for jobs'], 'question': 'How did Fry meet Bender in the first episode?'}, ...]\nschema = {'definitions': {'DefaultQuestion': {'properties': {'correctAnswer': {'title': 'Correctanswer', 'type': 'string'}, 'id...ype': 'object'}}, 'items': {'$ref': '#/definitions/DefaultQuestion'}, 'title': 'DefaultQuestionsList', 'type': 'array'}\ncls = <class 'jsonschema.validators.Draft202012Validator'>, args = (), kwargs = {}\nvalidator = Draft202012Validator(schema={'definitions': {'DefaultQuestion': {'properties': {'correctAnswer': {'title': 'Correctans...ems': {'$ref': '#/definition...faultQuestion'}, 'title': 'DefaultQuestionsList', 'type': 'array'}, format_checker=None)\nerror = <ValidationError: \"12 is not of type 'string'\">\n\n    def validate(instance, schema, cls=None, *args, **kwargs):\n        \"\"\"\n        Validate an instance under the given schema.\n    \n            >>> validate([2, 3, 4], {\"maxItems\": 2})\n            Traceback (most recent call last):\n                ...\n            ValidationError: [2, 3, 4] is too long\n    \n        :func:`~jsonschema.validators.validate` will first verify that the\n        provided schema is itself valid, since not doing so can lead to less\n        obvious error messages and fail in less obvious or consistent ways.\n    \n        If you know you have a valid schema already, especially\n        if you intend to validate multiple instances with\n        the same schema, you likely would prefer using the\n        `jsonschema.protocols.Validator.validate` method directly on a\n        specific validator (e.g. ``Draft20212Validator.validate``).\n    \n    \n        Arguments:\n    \n            instance:\n    \n                The instance to validate\n    \n            schema:\n    \n                The schema to validate with\n    \n            cls (jsonschema.protocols.Validator):\n    \n                The class that will be used to validate the instance.\n    \n        If the ``cls`` argument is not provided, two things will happen\n        in accordance with the specification. First, if the schema has a\n        :kw:`$schema` keyword containing a known meta-schema [#]_ then the\n        proper validator will be used. The specification recommends that\n        all schemas contain :kw:`$schema` properties for this reason. If no\n        :kw:`$schema` property is found, the default validator class is the\n        latest released draft.\n    \n        Any other provided positional and keyword arguments will be passed\n        on when instantiating the ``cls``.\n    \n        Raises:\n    \n            `jsonschema.exceptions.ValidationError`:\n    \n                if the instance is invalid\n    \n            `jsonschema.exceptions.SchemaError`:\n    \n                if the schema itself is invalid\n    \n        .. rubric:: Footnotes\n        .. [#] known by a validator registered with\n            `jsonschema.validators.validates`\n        \"\"\"\n        if cls is None:\n            cls = validator_for(schema)\n    \n        cls.check_schema(schema)\n        validator = cls(schema, *args, **kwargs)\n        error = exceptions.best_match(validator.iter_errors(instance))\n        if error is not None:\n>           raise error\nE           jsonschema.exceptions.ValidationError: 12 is not of type 'string'\nE           \nE           Failed validating 'type' in schema['items']['properties']['correctAnswer']:\nE               {'title': 'Correctanswer', 'type': 'string'}\nE           \nE           On instance[6]['correctAnswer']:\nE               12\n\n.venv/lib/python3.10/site-packages/jsonschema/validators.py:1121: ValidationError",
    "steps" : [ {
      "name" : "Getting all questions",
      "time" : {
        "start" : 1676326075384,
        "stop" : 1676326076525,
        "duration" : 1141
      },
      "status" : "passed",
      "steps" : [ {
        "name" : "Making GET request to \"'/questions'\"",
        "time" : {
          "start" : 1676326075500,
          "stop" : 1676326076525,
          "duration" : 1025
        },
        "status" : "passed",
        "steps" : [ ],
        "attachments" : [ ],
        "parameters" : [ {
          "name" : "url",
          "value" : "'/questions'"
        } ],
        "stepsCount" : 0,
        "attachmentsCount" : 0,
        "shouldDisplayMessage" : false,
        "hasContent" : true
      } ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "auth",
        "value" : "Authentication(auth_token=None, user=AuthUser(email='some@gmail.com', password='some'))"
      } ],
      "stepsCount" : 1,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "Checking that \"Response status code\" equals to \"200\"",
      "time" : {
        "start" : 1676326076526,
        "stop" : 1676326076526,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : false
    }, {
      "name" : "Validating schema",
      "time" : {
        "start" : 1676326076530,
        "stop" : 1676326076544,
        "duration" : 14
      },
      "status" : "broken",
      "statusMessage" : "jsonschema.exceptions.ValidationError: 12 is not of type 'string'\n\nFailed validating 'type' in schema['items']['properties']['correctAnswer']:\n    {'title': 'Correctanswer', 'type': 'string'}\n\nOn instance[6]['correctAnswer']:\n    12\n",
      "statusTrace" : "  File \"/home/vladimir/VSC_projects/trainer/.venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/vladimir/VSC_projects/trainer/utils/assertions/schema.py\", line 7, in validate_schema\n    validate(instance=instance, schema=schema)\n  File \"/home/vladimir/VSC_projects/trainer/.venv/lib/python3.10/site-packages/jsonschema/validators.py\", line 1121, in validate\n    raise error\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "instance",
        "value" : "[{'id': 1, 'question': \"What is Fry's first name?\", 'possibleAnswers': ['Fred', 'Philip', 'Will', 'John'], 'correctAnswer': 'Philip'}, {'id': 2, 'question': \"In 'Benders Big Score' what ailen species scam the earth?\", 'possibleAnswers': ['Nibbloniens', 'Omicrons', 'Robots', 'Nudest aliens', 'Tentacals'], 'correctAnswer': 'Nudest aliens'}, {'id': 3, 'question': 'What is benders middle and last name?', 'possibleAnswers': ['E Smithie', 'Flam Flexo', 'Lobster Squid', 'Bending Rodriguez', 'Steven martin'], 'correctAnswer': 'Bending Rodriguez'}, {'id': 4, 'question': 'What is Ziodberg?', 'possibleAnswers': ['Lobster', 'Alien', 'Muntant', 'Robot'], 'correctAnswer': 'Lobster'}, {'id': 5, 'question': 'What was Fry\"s job in 1999?', 'possibleAnswers': ['Manager', 'Bounty Hunter', 'Delivery Boy', 'Factory Worker', 'Cook'], 'correctAnswer': 'Delivery Boy'}, {'id': 6, 'question': 'How did Fry meet Bender in the first episode?', 'possibleAnswers': ['Bar', 'Suicide Booth', 'Street', 'Shop', 'Looking for jobs'], 'correctAnswer': 'Suicide Booth'}, {'id': 7, 'question': \"In 'The Cyber House Rules' how many orphans does Bender adopt?\", 'possibleAnswers': ['8', '10', '12', '14'], 'correctAnswer': 12}, {'id': 8, 'question': \"In 'The Why of Fry' what vehicle does Nibbler give to Fry to travel to the Infosphere?\", 'possibleAnswers': ['Scooty-Puff Jr', 'Zooty-Puff Jr', 'Scoochy-Puff Jr', 'Booty-Puff Jr'], 'correctAnswer': 'Scooty-Puff Jr'}, {'id': 9, 'question': \"Hermes' wife, LaBarbara, was once married to who?\", 'possibleAnswers': ['Trinidad Slim', 'Barbados Slim', 'Antigua Slim', 'Grenada Slim'], 'correctAnswer': 'Barbados Slim'}, {'id': 10, 'question': \"Where do the crew travel to in order to find the original were-car in 'The Honking'?\", 'possibleAnswers': ['The old abandoned Chevrolet factory', 'The old abandoned Dodge factory', 'The old abandoned Ford factory', 'The old abandoned Chrysler factory'], 'correctAnswer': 'The old abandoned Chrysler factory'}, {'id': 11, 'question': \"What was the name of Fry's mermaid girlfriend in 'The Deep South'?\", 'possibleAnswers': ['Ariel', 'Umbriel', 'Azriel', 'Meriel'], 'correctAnswer': 'Umbriel'}, {'id': 12, 'question': \"What was the PIN for Fry's ATM card, as revealed in 'A Fishful of Dollars'?\", 'possibleAnswers': ['1077', '1150', '1089', '1126', '1244', '1999'], 'correctAnswer': 1077}, {'id': 13, 'question': \"In 'Hell is Other Robots' Bender turns to which religion to help overcome his addiction?\", 'possibleAnswers': ['League of Sciencology', 'Temple of Robotology', 'Church of Roboism', 'Order of Mechanology'], 'correctAnswer': 'Temple of Robotology'}, {'id': 14, 'question': 'Which of the following is not a member of the Ultimate Robot Fighting League?', 'possibleAnswers': ['The Clearcutter', 'Millionaire Bot', 'Sergeant Feces Processor', 'The Chain Smoker', 'The Gender Bender'], 'correctAnswer': 'Millionaire Bot'}, {'id': 15, 'question': \"In 'The Cryonic Woman' what was the name of the leader of the feral adolescents that challenges Fry at Deathrolling?\", 'possibleAnswers': ['Butch', 'Zed', 'Spike', 'Snake'], 'correctAnswer': 'Zed'}, {'id': 16, 'question': 'What rank does Kif hold in the DOOP?', 'possibleAnswers': ['Sergeant', 'Captain', 'Lieutenant', 'Major'], 'correctAnswer': 'Lieutenant'}, {'id': 17, 'question': 'Who are the two recurring cops, often seen around New New York?', 'possibleAnswers': ['Jonesy and ISP', 'Smitty and URL', 'Brady and Dotcom', 'Harry and Capslock'], 'correctAnswer': 'Brady and Dotcom'}, {'id': 18, 'question': \"In 'Insane in the Mainframe', who is Fry's room mate at the Asylum for Criminally Insane Robots before Roberto is moved in?\", 'possibleAnswers': ['Joey Mousepad', 'Tinny Tim', 'Hedonismbot', 'Malfunctioning Eddie'], 'correctAnswer': 'Malfunctioning Eddie'}, {'id': 19, 'question': 'Which product successfully uses a dream advert to market itself to Fry?', 'possibleAnswers': ['Slurm', 'Bachelor Chowm', 'Lightspeed Briefs', \"Mom's Robot Oil\"], 'correctAnswer': 'Lightspeed Briefs'}, {'id': 20, 'question': \"What was Fry's job in 1999?\", 'possibleAnswers': ['Pizza Delivery Boy', 'Newspaper Delivery Boy', 'Milkman', 'Shoe Shine Boy', 'Postman'], 'correctAnswer': 'Pizza Delivery Boy'}, {'id': 21, 'question': 'What company does Dr. Farnsworth run?', 'possibleAnswers': ['Space Express', 'FexEd', 'Earth Express', 'Planet Express', 'Federal Express'], 'correctAnswer': 'Planet Express'}, {'id': 22, 'question': 'Futurama was amlost called what?', 'possibleAnswers': ['Doomsville or Aloha Mars', 'Lrrrenconcilable Ndndifferences', 'Futurella', 'World of Tomorrow'], 'correctAnswer': 'Doomsville or Aloha Mars'}, {'id': 23, 'question': 'What are the pest animals in New New York?', 'possibleAnswers': ['Rats', 'Mutated Gators', 'Owls', 'Pigeons', 'Omicrons'], 'correctAnswer': 'Owls'}, {'id': 24, 'question': \"In Love's Labours In Space which club did Leela visit to find a partner?\", 'possibleAnswers': ['Club Extravaganza', 'Bubble Bar', 'Hip Joint', \"O'Gorgnaxs\"], 'correctAnswer': 'Hip Joint'}, {'id': 25, 'question': 'In Fear of Bot Planet what fake religious robot holiday did Bender make up?', 'possibleAnswers': ['Bot-Mitvah', 'Robanza', 'Robonukah', 'Robotisam'], 'correctAnswer': 'Robonukah'}, {'id': 26, 'question': 'In Fry and the Slurm Factory what did Fry and Bender use to look in the Slurm cans?', 'possibleAnswers': ['X-Ray', 'Z-Ray', 'Lookamatic 5000', 'F-Ray'], 'correctAnswer': 'Lookamatic 5000'}, {'id': 27, 'question': \"What was the name of Fry's dog?\", 'possibleAnswers': ['Buster', 'I.C. Wiener', 'Robo-Dog', 'Seymour Asses'], 'correctAnswer': 'Seymour Asses'}, {'id': 28, 'question': \"What is Planet Express's Slogan?\", 'possibleAnswers': [\"Our crew is replaceable. Your package isn't\", 'Good news everyone', 'We are the fastest service, no matter how long it takes.', 'We will get it there, eventually.', \"If it ain't broke, we'll break it.\"], 'correctAnswer': \"Our crew is replaceable. Your package isn't\"}, {'id': 944, 'question': '4cYakMqPIgh0', 'possibleAnswers': ['pdJJQmb4vMx', '8U2hf7HDp1eaTyb', 'tkLDlv7HVte', 'fkQUzV2WbsiTa', 'KEQfqvd73', 'eEEfxiZD7', '50zkHtJY0', 'rwqv4haZx', 'lcxudvBm0jc', 'SVLnE5Olv7n18z'], 'correctAnswer': '2mR0HJuec3T'}, {'id': 308, 'question': 'T9fCpxcde', 'possibleAnswers': ['0llI1twGlae6Lv', 'oHeIMCvhP5EaF', 'OXeXRQXkVhg', 'N0Xe2pA2n', 'CzBTMUUfn', 'sGHuyywZ86l', '49bc4ExLeKp4vx6', 'BW3kjJhSGaSSUxH', 'C16yW3h6qSR80o', '6fd4nfGca9kf'], 'correctAnswer': 'PGmdTZUH24'}, {'id': 851, 'question': 'qoFRp7x9Hr', 'possibleAnswers': ['XpcdMt4dFtGVC', 'JTYFVtdICqfg', 'hC9hPOTandBd', 'sDy7TQmig', '8brvtMFrIER4DK', 'oXboKJnO9', 'VEeznfmSdQ', 'G4S6UJPrnU', 'Qo8H1Cj8hOhaxj', '79KIN5FrBlpS', 'L58d7TyzyKSQAY'], 'correctAnswer': 'sShKUE8IeXaytz'}, {'id': 105, 'question': 'nqWCyTSjTUWH4U', 'possibleAnswers': ['KGDf7SiU2fWW0J', 'Nzv6uuCEKd9oBDw', 'KoVRXtXrmZC0L', '4eTmR0QXN', '2rpft5OTnU1', '5I2tCjE6D', 'eCqcpaNiDcmoC4', '54Gh78rij', '1KIHgT3bKjgcej'], 'correctAnswer': 'WYHKIZb0HLF9'}, {'id': 301, 'question': 'sbMbi8Yn4tGp', 'possibleAnswers': ['XBwPiHXgckMcblr', 'Zd89ZyJboUp9TBp', 'MQSmDqwBq', 'Nn4xPr0CF', 'bSRjApBwt7IHf', 'B858aajZ9SFJ', 'OFikVVcGlstObp', '10PQ35tVMd3dZ', 'g34mI8dpExnW1', 'L65rDnY4VT', 'Y7CAZ8SQ0UIe', 'ckkxCeqU5kOPWa', 'SpybDxESb8RgYU', '0qu4azw5DsmMQ', 'OG1FkfnvgfyOB'], 'correctAnswer': 'XGfDmz2j2'}, {'id': 900, 'question': 'YehrVwv7LTuPH', 'possibleAnswers': ['09RjvqMsb', '11FPAEV7B', 'h04k5XLsyPA', 'BgnCR5dANGamZF', 'jayue1aey', 'kWZc2tBs1bc', '8ZEnep1XtIn0k', 'jlttxugkIVjta', 'SFiqLqZXEGtPi', 'HTCm93kK5g'], 'correctAnswer': 'odg8GKgmf5'}, {'id': 778, 'question': 'gbF99qXAoe2WnT', 'possibleAnswers': ['dDcWsra0kzZb7oS', 'pLXm20ToU0R', '1JXdodtllT', 'T6sQKrRnKHOqwj', 'cjCeiJMkJQHfv', 'G35IKxi91Nr', 'oJZFT7SRXNKUXvi', 'NyNj5F3mhh8l', '0owroy9jLgv3', 'b6oikXlUnMbY0N', 'UpxUwReDHa1l5', 'naSbxHFs0N', 'xb2ilMpkKu', 'dxmKTIv71JvNQ', 'usmbwha3psHtMd'], 'correctAnswer': 'J7yFgrlle9E'}, {'id': 606, 'question': '9h8oh2pJV4OX1Ox', 'possibleAnswers': ['XqsGmYnEo', 'VZNeiv0zq6yqDT', '6D7tQweHrZ', 'YMF6pJTsNmvA', 'THynpYMpieH', 'UhqEA9buofAWYz', 'tKWHrrncQb0e', 'Nspt5BeVw3oYS', 'jF7HwGZFX1dQeR'], 'correctAnswer': 'gutsX4YadGxgUSB'}]"
      }, {
        "name" : "schema",
        "value" : "{'title': 'DefaultQuestionsList', 'type': 'array', 'items': {'$ref': '#/definitions/DefaultQuestion'}, 'definitions': {'DefaultQuestion': {'title': 'DefaultQuestion', 'type': 'object', 'properties': {'id': {'title': 'Id', 'type': 'integer'}, 'question': {'title': 'Question', 'type': 'string'}, 'possibleAnswers': {'title': 'Possibleanswers', 'type': 'array', 'items': {'type': 'string'}}, 'correctAnswer': {'title': 'Correctanswer', 'type': 'string'}}}}}"
      } ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 4,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "Questions API"
  }, {
    "name" : "feature",
    "value" : "Questions"
  }, {
    "name" : "tag",
    "value" : "questions"
  }, {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_futurama_questions"
  }, {
    "name" : "subSuite",
    "value" : "TestQuestions"
  }, {
    "name" : "host",
    "value" : "hvova"
  }, {
    "name" : "thread",
    "value" : "1150171-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_futurama_questions"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "questions" ]
  },
  "source" : "145a1a9bf7531247.json",
  "parameterValues" : [ ]
}